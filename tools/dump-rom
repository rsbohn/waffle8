#!/usr/bin/env bash
# Dump a PDP-8 ROM image stored as Motorola S-records into 12-bit words.
set -euo pipefail

if [[ $# -ne 1 ]]; then
    echo "Usage: $0 <srec-image>" >&2
    exit 1
fi

image=$1

if [[ ! -f "$image" ]]; then
    echo "Image '$image' not found." >&2
    exit 1
fi

python3 - "$image" <<'PY'
import sys
from pathlib import Path

path = Path(sys.argv[1])
try:
    lines = path.read_text().splitlines()
except OSError as exc:
    print(f"Unable to read {path}: {exc}", file=sys.stderr)
    sys.exit(1)

byte_map = {}
for raw in lines:
    line = raw.strip()
    if not line or not line.startswith('S'):
        continue
    record_type = line[1]
    if record_type not in '123':  # data records
        continue

    try:
        count = int(line[2:4], 16)
    except ValueError:
        print(f"Malformed count in line: {line}", file=sys.stderr)
        sys.exit(1)

    address_width = {'1': 4, '2': 6, '3': 8}[record_type]
    address_field = line[4:4 + address_width]
    data_field = line[4 + address_width: -2]

    try:
        base_address = int(address_field, 16)
    except ValueError:
        print(f"Malformed address in line: {line}", file=sys.stderr)
        sys.exit(1)

    if len(data_field) % 2 != 0:
        print(f"Odd data byte count in line: {line}", file=sys.stderr)
        sys.exit(1)

    # Count includes address and checksum bytes; validate length when possible.
    data_bytes = [int(data_field[i:i + 2], 16) for i in range(0, len(data_field), 2)]
    expected_payload = count - (address_width // 2) - 1
    if expected_payload != len(data_bytes):
        print(f"Count/length mismatch in line: {line}", file=sys.stderr)
        sys.exit(1)

    for offset, value in enumerate(data_bytes):
        byte_map[base_address + offset] = value

if not byte_map:
    print(f"No data records found in {path}.", file=sys.stderr)
    sys.exit(1)

words = []
for byte_addr in sorted(addr for addr in byte_map if addr % 2 == 0):
    lo = byte_map.get(byte_addr)
    hi = byte_map.get(byte_addr + 1)
    if lo is None or hi is None:
        print(f"Incomplete word at byte address {byte_addr:04X}", file=sys.stderr)
        continue
    words.append((byte_addr // 2, ((hi << 8) | lo) & 0x0FFF))

if not words:
    print(f"No complete words decoded from {path}.", file=sys.stderr)
    sys.exit(1)

LINE_WIDTH = 8  # 0o10 words per line
current = []
previous = None

def flush():
    if not current:
        return
    start = current[0][0]
    payload = " ".join(f"{word:04o}" for _, word in current)
    print(f"{start:04o}: {payload}")

for addr, word in words:
    contiguous = previous is not None and addr == previous + 1
    if not contiguous and current:
        flush()
        current = []
    current.append((addr, word))
    previous = addr
    if len(current) == LINE_WIDTH:
        flush()
        current = []

flush()
PY
